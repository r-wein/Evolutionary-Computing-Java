package randomExpression;

public class RandomStringExpression extends StringExpression {

	/********************************************
	 ** MEMBER VARIABLES
	 ********************************************/

	private ExpressionBranch leftBranch;
	private ExpressionBranch rightBranch;
	private String rootOperator;
	private String randomExpression;

	/********************************************
	 ** CONSTRUCTOR
	 ********************************************/

	// constructor for unbred program
	public RandomStringExpression(int branchSize) {
		super(branchSize);
		this.generateRandomExpression();
	}

	// constructor for child expression
	public RandomStringExpression(int branchSize, String[] child) {
		this(branchSize);
		this.leftBranch.setBranch(child[0]);
		this.rightBranch.setBranch(child[2]);
		this.rootOperator = child[1];
		this.updateProgramGenome();
	}

	/********************************************
	 ** OVERRIDE
	 ********************************************/

	@Override
	public String toString() {

		/*
		 * print to console the expression and the maximum depth
		 */

		return super.toString() + "\nExpression: " + this.getRandomExpression() + "\nMax Branch Length: "
				+ super.getBranchSize();
	}

	/********************************************
	 ** GETTERS
	 *******************************************/

	// return the equation generated by generateRandomExpression
	public String getRandomExpression() {
		return this.randomExpression;
	}

	// return the current operator
	public String getRootOperator() {
		return this.rootOperator;
	}

	// returns everything to the left of the main operand
	public String getLeftBranch() {
		return this.leftBranch.getBranch();
	}

	// returns everything to the right of the main operand
	public String getRightBranch() {
		return this.rightBranch.getBranch();
	}

	/********************************************
	 ** SETTER
	 *******************************************/

	// change the middle operator
	public void setRootOperator(String alteredOperator) {
		this.rootOperator = alteredOperator;
		this.updateProgramGenome();
	}
	
	// changes everything to the left of the main operand
	public void setLeftBranch(String alteredLeftSide) {
		this.leftBranch.setBranch(alteredLeftSide);
		this.updateProgramGenome();
	}

	// changes everything to the right of the main operand
	public void setRightBranch(String alteredRightSide) {
		this.rightBranch.setBranch(alteredRightSide);
		this.updateProgramGenome();
	}

	/********************************************
	 ** UPDATE METHODS
	 ********************************************/

	private void updateProgramGenome() {
		this.randomExpression = "(" + this.leftBranch.getBranch() + ")" + this.rootOperator + "("
				+ this.rightBranch.getBranch() + ")";
	}

	/********************************************
	 ** PUBLIC METHODS
	 ********************************************/

	private void generateRandomExpression() {

		// choose operand at random
		this.rootOperator = super.mathOperator();
		// construct left side of equation
		this.leftBranch = new ExpressionBranch(super.getBranchSize());
		// construct ride side of equation
		this.rightBranch = new ExpressionBranch(super.getBranchSize());
		// put it all together
		this.updateProgramGenome();
	}
	
	public boolean isValid() {
		return this.leftBranch.isValid() && this.rightBranch.isValid() && super.validOperator(this.rootOperator);
	}
}